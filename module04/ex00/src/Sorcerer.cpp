#include "Sorcerer.hpp"

/* ************************************************************************** */
/* ---------------------------- STATIC VARIABLE ----------------------------- */
/* ************************************************************************** */

/* static variable code */

/* ************************************************************************** */
/* ------------------------------ CONSTRUCTOR ------------------------------- */
/* ************************************************************************** */

Sorcerer::Sorcerer() {}
Sorcerer::Sorcerer(const std::string& _name, const std::string& _title)
{
	/* constructor code */
	this->_name = _name;
	this->_title = _title;
	std::cout << _name << ", " << _title << ", is born!" << std::endl;
}

Sorcerer::Sorcerer(const Sorcerer& copy)
{
	this->operator=(copy);
}

/* ************************************************************************** */
/* ------------------------------- DESTRUCTOR ------------------------------- */
/* ************************************************************************** */

Sorcerer::~Sorcerer()
{
	/* destructor code */
	std::cout << _name << ", " << _title << ", is dead. Consequences will never be the same!" << std::endl;

}

/* ************************************************************************** */
/* -------------------------------- OVERLOAD -------------------------------- */
/* ************************************************************************** */

Sorcerer& Sorcerer::operator=(const Sorcerer& obj)
{
	if (this == &obj)
		return (*this);
	/* overload= code */
	return (*this);
}

std::ostream&
operator<<(std::ostream& out, const Sorcerer& sorcerer)
{
	/* ostream output overload code */
	out << "I am " << sorcerer.get_name() << ", " << sorcerer.get_name() << ", and I like ponies!" << std::endl;
	return (out);
}

/* ************************************************************************** */
/* --------------------------------- GETTER --------------------------------- */
/* ************************************************************************** */

/* getter code */
std::string Sorcerer::get_name(void) const
{
	return (this->_name);
}

std::string Sorcerer::get_title(void) const
{
	return (this->_title);
}

/* ************************************************************************** */
/* --------------------------------- SETTER --------------------------------- */
/* ************************************************************************** */

/* setter code */

/* ************************************************************************** */
/* ------------------------------- EXCEPTION -------------------------------- */
/* ************************************************************************** */

/* exception code */

/* ************************************************************************** */
/* ---------------------------- MEMBER FUNCTION ----------------------------- */
/* ************************************************************************** */
void Sorcerer::polymorph(Victim const &target) const
{
	target.getPolymorphed();
}