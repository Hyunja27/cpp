#ifndef MUTANTSTACK_HPP
# define MUTANTSTACK_HPP

#include "MutantStack.hpp"

/* ************************************************************************** */
/* ---------------------------- STATIC VARIABLE ----------------------------- */
/* ************************************************************************** */

/* static variable code */

/* ************************************************************************** */
/* ------------------------------ CONSTRUCTOR ------------------------------- */
/* ************************************************************************** */

template <typename T>
MutantStack<T>::MutantStack()
{
}

template <typename T>
MutantStack<T>::MutantStack(const MutantStack<T>& copy)
{
	/* copy-constructor code */
	this->operator=(copy);
}

/* ************************************************************************** */
/* ------------------------------- DESTRUCTOR ------------------------------- */
/* ************************************************************************** */

template <typename T>
MutantStack<T>::~MutantStack()
{
	/* destructor code */
}

/* ************************************************************************** */
/* -------------------------------- OVERLOAD -------------------------------- */
/* ************************************************************************** */

template <typename T>
MutantStack<T>& MutantStack<T>::operator=(const MutantStack<T>& obj)
{
	if (this == &obj)
		return (*this);
	
	this->c = obj.c;
	return (*this);
}


/* ************************************************************************** */
/* --------------------------------- GETTER --------------------------------- */
/* ************************************************************************** */

/* getter code */

/* ************************************************************************** */
/* --------------------------------- SETTER --------------------------------- */
/* ************************************************************************** */

/* setter code */

/* ************************************************************************** */
/* ------------------------------- EXCEPTION -------------------------------- */
/* ************************************************************************** */

/* exception code */

/* ************************************************************************** */
/* ---------------------------- MEMBER FUNCTION ----------------------------- */
/* ************************************************************************** */
template <typename T>
typename MutantStack<T>::new_iterator MutantStack<T>::begin(void)
{

	return this->c.begin();

}

template <typename T>
typename MutantStack<T>::new_iterator MutantStack<T>::end(void)
{

	return this->c.end();

}

template <typename T>
typename MutantStack<T>::new_r_iterator MutantStack<T>::rbegin(void)
{
	return this->c.rbegin();
}

template <typename T>
typename MutantStack<T>::new_r_iterator MutantStack<T>::rend(void)
{
	return this->c.rend();
}

#endif